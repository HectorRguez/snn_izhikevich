-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_snn_izikevich_hls_snn_izikevich_Pipeline_synapses_layer_updates_VITIS_LOOP_22_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    synapse_s_mem_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    synapse_s_mem_ce0 : OUT STD_LOGIC;
    synapse_s_mem_we0 : OUT STD_LOGIC;
    synapse_s_mem_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    synapse_s_mem_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    synapse_s_mem_ce1 : OUT STD_LOGIC;
    synapse_s_mem_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_mem_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v_mem_ce0 : OUT STD_LOGIC;
    v_mem_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_mem_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    p_mem_ce0 : OUT STD_LOGIC;
    p_mem_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_465_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_465_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_465_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_465_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_465_p_ce : OUT STD_LOGIC;
    grp_fu_469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_469_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_469_p_ce : OUT STD_LOGIC );
end;


architecture behav of hls_snn_izikevich_hls_snn_izikevich_Pipeline_synapses_layer_updates_VITIS_LOOP_22_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3F666666 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011001100110011001100110";
    constant ap_const_lv32_420C0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010000011000000000000000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln22_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l_load_reg_497 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_load_reg_497_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal l_load_reg_497_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln22_1_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_503_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_503_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_503_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6_i_i_i_mid1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6_i_i_i_mid1_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6_i_i_i_mid1_reg_511_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6_i_i_i_mid1_reg_511_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal synapse_s_mem_addr_reg_516 : STD_LOGIC_VECTOR (3 downto 0);
    signal synapse_s_mem_addr_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal synapse_s_mem_addr_reg_516_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal synapse_s_mem_addr_reg_516_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln22_fu_327_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln22_reg_527 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_synapse_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_synapse_reg_532_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp6_i_i_i5_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6_i_i_i5_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp14_i_i_i3_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp14_i_i_i3_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln25_2_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln22_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_3_fu_331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal xl_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln22_2_fu_275_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_xl_load : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_fu_78 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_5_fu_315_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_fu_82 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln22_2_fu_216_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_l_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_4_fu_184_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln25_fu_224_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_236_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_228_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln25_fu_244_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_fu_208_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln25_fu_248_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln25_1_fu_260_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln25_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_1_fu_302_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_1_fu_308_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln28_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_367_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_377_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_405_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln22_3_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_4_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hls_snn_izikevich_faddfsub_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_snn_izikevich_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_snn_izikevich_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_snn_izikevich_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_1_no_dsp_1_U13 : component hls_snn_izikevich_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => v_mem_q0,
        din1 => ap_const_lv32_420C0000,
        opcode => ap_const_lv5_3,
        dout => tmp_9_fu_144_p2);

    flow_control_loop_pipe_sequential_init_U : component hls_snn_izikevich_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_86 <= add_ln22_4_fu_184_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_86 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    l_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    l_fu_82 <= select_ln22_2_fu_216_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    l_fu_82 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    x_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_1_fu_78 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    x_1_fu_78 <= select_ln22_5_fu_315_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_fu_70 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    x_fu_70 <= add_ln22_3_fu_331_p2;
                end if;
            end if; 
        end if;
    end process;

    xl_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    xl_fu_74 <= add_ln22_2_fu_275_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    xl_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln28_1_reg_558 <= and_ln28_1_fu_415_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                cmp6_i_i_i5_reg_543 <= cmp6_i_i_i5_fu_347_p2;
                cmp6_i_i_i_mid1_reg_511_pp0_iter2_reg <= cmp6_i_i_i_mid1_reg_511_pp0_iter1_reg;
                icmp_ln22_1_reg_503_pp0_iter2_reg <= icmp_ln22_1_reg_503_pp0_iter1_reg;
                icmp_ln22_1_reg_503_pp0_iter3_reg <= icmp_ln22_1_reg_503_pp0_iter2_reg;
                l_load_reg_497_pp0_iter2_reg <= l_load_reg_497_pp0_iter1_reg;
                new_synapse_reg_532 <= grp_fu_469_p_dout0;
                new_synapse_reg_532_pp0_iter3_reg <= new_synapse_reg_532;
                synapse_s_mem_addr_reg_516_pp0_iter2_reg <= synapse_s_mem_addr_reg_516_pp0_iter1_reg;
                synapse_s_mem_addr_reg_516_pp0_iter3_reg <= synapse_s_mem_addr_reg_516_pp0_iter2_reg;
                trunc_ln22_reg_527 <= trunc_ln22_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                cmp6_i_i_i_mid1_reg_511_pp0_iter1_reg <= cmp6_i_i_i_mid1_reg_511;
                icmp_ln22_1_reg_503_pp0_iter1_reg <= icmp_ln22_1_reg_503;
                l_load_reg_497_pp0_iter1_reg <= l_load_reg_497;
                synapse_s_mem_addr_reg_516_pp0_iter1_reg <= synapse_s_mem_addr_reg_516;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln22_1_reg_503_pp0_iter2_reg = ap_const_lv1_0))) then
                cmp14_i_i_i3_reg_548 <= cmp14_i_i_i3_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp6_i_i_i_mid1_reg_511 <= cmp6_i_i_i_mid1_fu_254_p2;
                icmp_ln22_1_reg_503 <= icmp_ln22_1_fu_202_p2;
                l_load_reg_497 <= ap_sig_allocacmp_l_load;
                synapse_s_mem_addr_reg_516 <= zext_ln25_2_fu_270_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln22_1_fu_302_p2 <= std_logic_vector(unsigned(x_1_fu_78) + unsigned(ap_const_lv4_6));
    add_ln22_2_fu_275_p2 <= std_logic_vector(unsigned(select_ln22_fu_208_p3) + unsigned(ap_const_lv3_1));
    add_ln22_3_fu_331_p2 <= std_logic_vector(unsigned(select_ln22_1_fu_308_p3) + unsigned(ap_const_lv4_1));
    add_ln22_4_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln22_fu_196_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_l_load) + unsigned(ap_const_lv2_1));
    add_ln25_fu_264_p2 <= std_logic_vector(unsigned(sub_ln25_fu_248_p2) + unsigned(zext_ln25_1_fu_260_p1));
    add_ln30_fu_405_p2 <= std_logic_vector(unsigned(trunc_ln22_reg_527) + unsigned(ap_const_lv3_2));
    and_ln28_1_fu_415_p2 <= (select_ln22_3_fu_352_p3 and and_ln28_fu_399_p2);
    and_ln28_2_fu_437_p2 <= (xor_ln28_fu_432_p2 and select_ln22_4_fu_421_p3);
    and_ln28_3_fu_443_p2 <= (p_mem_q0 and and_ln28_2_fu_437_p2);
    and_ln28_fu_399_p2 <= (tmp_9_fu_144_p2 and or_ln28_fu_393_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln22_fu_178_p2)
    begin
        if (((icmp_ln22_fu_178_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_l_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, l_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_l_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_l_load <= l_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_xl_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, xl_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_xl_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_xl_load <= xl_fu_74;
        end if; 
    end process;

    bitcast_ln28_fu_363_p1 <= v_mem_q0;
    cmp14_i_i_i3_fu_358_p2 <= "1" when (l_load_reg_497_pp0_iter2_reg = ap_const_lv2_1) else "0";
    cmp6_i_i_i5_fu_347_p2 <= "1" when (l_load_reg_497_pp0_iter2_reg = ap_const_lv2_0) else "0";
    cmp6_i_i_i_mid1_fu_254_p2 <= "1" when (add_ln22_fu_196_p2 = ap_const_lv2_0) else "0";
    grp_fu_465_p_ce <= ap_const_logic_1;
    grp_fu_465_p_din0 <= new_synapse_reg_532;
    grp_fu_465_p_din1 <= ap_const_lv32_3F800000;
    grp_fu_465_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_469_p_ce <= ap_const_logic_1;
    grp_fu_469_p_din0 <= synapse_s_mem_q1;
    grp_fu_469_p_din1 <= ap_const_lv32_3F666666;
    icmp_ln22_1_fu_202_p2 <= "1" when (ap_sig_allocacmp_xl_load = ap_const_lv3_6) else "0";
    icmp_ln22_fu_178_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_C) else "0";
    icmp_ln28_1_fu_387_p2 <= "1" when (trunc_ln28_fu_377_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_381_p2 <= "0" when (tmp_8_fu_367_p4 = ap_const_lv8_FF) else "1";
    or_ln28_fu_393_p2 <= (icmp_ln28_fu_381_p2 or icmp_ln28_1_fu_387_p2);
    p_mem_address0 <= zext_ln30_fu_410_p1(3 - 1 downto 0);

    p_mem_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_mem_ce0 <= ap_const_logic_1;
        else 
            p_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln22_1_fu_308_p3 <= 
        add_ln22_1_fu_302_p2 when (icmp_ln22_1_reg_503_pp0_iter1_reg(0) = '1') else 
        x_fu_70;
    select_ln22_2_fu_216_p3 <= 
        add_ln22_fu_196_p2 when (icmp_ln22_1_fu_202_p2(0) = '1') else 
        ap_sig_allocacmp_l_load;
    select_ln22_3_fu_352_p3 <= 
        cmp6_i_i_i_mid1_reg_511_pp0_iter2_reg when (icmp_ln22_1_reg_503_pp0_iter2_reg(0) = '1') else 
        cmp6_i_i_i5_fu_347_p2;
    select_ln22_4_fu_421_p3 <= 
        cmp6_i_i_i5_reg_543 when (icmp_ln22_1_reg_503_pp0_iter3_reg(0) = '1') else 
        cmp14_i_i_i3_reg_548;
    select_ln22_5_fu_315_p3 <= 
        add_ln22_1_fu_302_p2 when (icmp_ln22_1_reg_503_pp0_iter1_reg(0) = '1') else 
        x_1_fu_78;
    select_ln22_fu_208_p3 <= 
        ap_const_lv3_0 when (icmp_ln22_1_fu_202_p2(0) = '1') else 
        ap_sig_allocacmp_xl_load;
    select_ln28_fu_426_p3 <= 
        grp_fu_465_p_dout0 when (and_ln28_1_reg_558(0) = '1') else 
        new_synapse_reg_532_pp0_iter3_reg;
    sub_ln25_fu_248_p2 <= std_logic_vector(unsigned(tmp_s_fu_228_p3) - unsigned(zext_ln25_fu_244_p1));
    synapse_s_mem_address0 <= synapse_s_mem_addr_reg_516_pp0_iter3_reg;
    synapse_s_mem_address1 <= zext_ln25_2_fu_270_p1(4 - 1 downto 0);

    synapse_s_mem_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            synapse_s_mem_ce0 <= ap_const_logic_1;
        else 
            synapse_s_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    synapse_s_mem_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            synapse_s_mem_ce1 <= ap_const_logic_1;
        else 
            synapse_s_mem_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    synapse_s_mem_d0 <= 
        grp_fu_465_p_dout0 when (and_ln28_3_fu_443_p2(0) = '1') else 
        select_ln28_fu_426_p3;

    synapse_s_mem_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            synapse_s_mem_we0 <= ap_const_logic_1;
        else 
            synapse_s_mem_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_236_p3 <= (select_ln22_2_fu_216_p3 & ap_const_lv1_0);
    tmp_8_fu_367_p4 <= bitcast_ln28_fu_363_p1(30 downto 23);
    tmp_s_fu_228_p3 <= (trunc_ln25_fu_224_p1 & ap_const_lv3_0);
    trunc_ln22_fu_327_p1 <= select_ln22_1_fu_308_p3(3 - 1 downto 0);
    trunc_ln25_fu_224_p1 <= select_ln22_2_fu_216_p3(1 - 1 downto 0);
    trunc_ln28_fu_377_p1 <= bitcast_ln28_fu_363_p1(23 - 1 downto 0);
    v_mem_address0 <= zext_ln22_fu_322_p1(4 - 1 downto 0);

    v_mem_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v_mem_ce0 <= ap_const_logic_1;
        else 
            v_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln28_fu_432_p2 <= (ap_const_lv1_1 xor and_ln28_1_reg_558);
    zext_ln22_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_1_fu_308_p3),64));
    zext_ln25_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_208_p3),4));
    zext_ln25_2_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_264_p2),64));
    zext_ln25_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_236_p3),4));
    zext_ln30_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_405_p2),64));
end behav;
